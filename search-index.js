var searchIndex = {};
searchIndex["minivm"] = {"doc":"","items":[[5,"error","minivm","Prints custom error message to STDERR.",null,{"inputs":[{"name":"str"}],"output":null}],[0,"commands","","",null,null],[0,"compile_command","minivm::commands","This module provides the various CLI command implementations.",null,null],[3,"CompileCommand","minivm::commands::compile_command","",null,null],[11,"new","","",0,{"inputs":[{"name":"string"}],"output":{"name":"compilecommand"}}],[11,"execute","","",0,{"inputs":[{"name":"self"}],"output":null}],[0,"parse_command","minivm::commands","",null,null],[3,"ParserCommand","minivm::commands::parse_command","",null,null],[11,"new","","",1,{"inputs":[{"name":"string"},{"name":"bool"},{"name":"bool"}],"output":{"name":"parsercommand"}}],[11,"execute","","",1,{"inputs":[{"name":"self"}],"output":null}],[0,"run_command","minivm::commands","",null,null],[3,"RunCommand","minivm::commands::run_command","",null,null],[11,"new","","",2,{"inputs":[{"name":"string"}],"output":{"name":"runcommand"}}],[11,"execute","","",2,{"inputs":[{"name":"self"}],"output":null}],[8,"Command","minivm::commands","Trait for a command to execute.",null,null],[10,"execute","","Executes the command.",3,{"inputs":[{"name":"self"}],"output":null}],[0,"frontend","minivm","",null,null],[3,"Position","minivm::frontend","Describes a character position in the source string.",null,null],[0,"character_stream","","",null,null],[3,"CharacterStream","minivm::frontend::character_stream","Represents a string as stream of characters.",null,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new stream.",4,{"inputs":[{"name":"string"}],"output":{"name":"characterstream"}}],[11,"next","","Move to the next character.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"has_next","","Check if there is a next character.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"current","","Get the character at the streams current position.",4,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"peek","","Get the next character without moving to it.",4,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"position","","Get the position of the current character.",4,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[0,"character_helper","minivm::frontend","",null,null],[3,"CharacterHelper","minivm::frontend::character_helper","Provides several helper functions to recognize characters.",null,null],[11,"is_alphabetic","","Determines if a given character is alphabetic.",5,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[11,"is_numeric","","Determines if a given character is numeric.",5,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[11,"is_alphanumeric","","Determines if a given character is alphabetic or numeric.",5,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[11,"is_double_quote","","Determines if a given character is a double quote.",5,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[11,"is_single_quote","","Determines if a given character is a single quote.",5,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[11,"is_operator","","Determines if a given character is an operator.",5,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[11,"is_white_space","","Determines if a given character is a white space.",5,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[11,"is_new_line","","Determines if a given character is a new line.",5,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[0,"lexer","minivm::frontend","",null,null],[3,"Lexer","minivm::frontend::lexer","Does the lexical analysis to recognize tokens from a given source character stream.",null,null],[11,"new","","Creates a new lexer.",6,{"inputs":[{"name":"characterstream"}],"output":{"name":"lexer"}}],[11,"input","","Get the input character stream.",6,{"inputs":[{"name":"self"}],"output":{"name":"characterstream"}}],[11,"current","","Get the current recognized token.",6,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"next","","Recognizes the next token.",6,{"inputs":[{"name":"self"}],"output":null}],[0,"parser","minivm::frontend","",null,null],[3,"Parser","minivm::frontend::parser","Parses the tokens recognized by the lexer.",null,null],[11,"new","","",7,{"inputs":[{"name":"lexer"}],"output":{"name":"parser"}}],[11,"parse","","",7,{"inputs":[{"name":"self"}],"output":null}],[0,"token","minivm::frontend","",null,null],[3,"Token","minivm::frontend::token","Defines a recognized token in the source.",null,null],[4,"TokenType","","Types of tokens.",null,null],[13,"INTEGER","","",8,null],[13,"REAL","","",8,null],[13,"BOOL","","",8,null],[13,"STRING","","",8,null],[13,"CHARACTER","","",8,null],[13,"KEYWORD","","",8,null],[13,"IDENTIFIER","","",8,null],[13,"L_PAREN","","",8,null],[13,"R_PAREN","","",8,null],[13,"L_BRACE","","",8,null],[13,"R_BRACE","","",8,null],[13,"L_BRACK","","",8,null],[13,"R_BRACK","","",8,null],[13,"COMMA","","",8,null],[13,"OPERATOR","","",8,null],[13,"EOL","","",8,null],[13,"EOF","","",8,null],[4,"Keyword","","Reserved keywords.",null,null],[13,"AND","","",9,null],[13,"OR","","",9,null],[13,"NOT","","",9,null],[13,"IF","","",9,null],[13,"ELSE","","",9,null],[13,"WHILE","","",9,null],[13,"CONST","","",9,null],[13,"VAR","","",9,null],[4,"Operator","","Available operators.",null,null],[13,"ASSIGN","","",10,null],[13,"EQUAL","","",10,null],[13,"NOT_EQUAL","","",10,null],[13,"LESS_THAN","","",10,null],[13,"LESS_THAN_EQUAL","","",10,null],[13,"GREATER_THAN","","",10,null],[13,"GREATER_THAN_EQUAL","","",10,null],[13,"PLUS","","",10,null],[13,"MINUS","","",10,null],[13,"STAR","","",10,null],[13,"SLASH","","",10,null],[13,"MOD","","",10,null],[17,"END_OF_FILE","","Sentinel to indicate end of file.",null,null],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"new","","Creates a new token.",11,{"inputs":[{"name":"position"},{"name":"tokentype"},{"name":"string"}],"output":{"name":"token"}}],[11,"get_token_type","","Get the type of the token.",11,{"inputs":[{"name":"self"}],"output":{"name":"tokentype"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"tokentype"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"tokentype"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"for_literal","","Maps a literal keyword.",9,{"inputs":[{"name":"string"}],"output":{"name":"keyword"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"operator"}],"output":{"name":"bool"}}],[11,"fmt","minivm::frontend","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"CompileCommand"],[3,"ParserCommand"],[3,"RunCommand"],[8,"Command"],[3,"CharacterStream"],[3,"CharacterHelper"],[3,"Lexer"],[3,"Parser"],[4,"TokenType"],[4,"Keyword"],[4,"Operator"],[3,"Token"],[3,"Position"]]};
initSearch(searchIndex);
