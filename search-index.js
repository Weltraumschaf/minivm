var searchIndex = {};
searchIndex["minivm"] = {"doc":"","items":[[5,"error","minivm","Prints custom error message to STDERR.",null,{"inputs":[{"name":"str"}],"output":null}],[0,"backend","","",null,null],[0,"bytecode","minivm::backend","Backend module of Mini VM.",null,null],[4,"List","minivm::backend::bytecode","",null,null],[13,"Cons","","Tuple struct that wraps an element and a pointer to the next node.",0,null],[13,"Nil","","A node that signifies the end of the linked list.",0,null],[4,"Instruction","","Defines the available byte code instructions.",null,null],[13,"Nop","","Perform no operation. Stack (before -> after): [no change] Other bytes (count: operand labels): -",1,null],[13,"IPush","","Pushes eight bytes onto the stack as an integer value. Stack (before -> after): [] -> [value] Other bytes (count: operand labels): 8: byte1, byte2, byte3, byte4, byte5, byte6, byte7, byte8",1,null],[13,"IStore","","Store integer value into variable #index. Stack (before -> after): [value] -> [] Other bytes (count: operand labels): 1: index",1,null],[13,"ILoad","","Load an integer value from a local variable #index. Stack (before -> after): [] -> [value] Other bytes (count: operand labels): 1: index",1,null],[13,"IAdd","","Add two integers. Stack (before -> after): [value1, value2] -> [result] Other bytes (count: operand labels): -",1,null],[13,"Print","","Print the value on top of the stack. /// Stack (before -> after): [value] -> [] Other bytes (count: operand labels): -",1,null],[11,"new","","",0,{"inputs":[],"output":{"name":"list"}}],[11,"prepend","","",0,{"inputs":[{"name":"self"},{"name":"instruction"}],"output":{"name":"list"}}],[11,"append","","",0,{"inputs":[{"name":"self"},{"name":"instruction"}],"output":{"name":"list"}}],[11,"len","","",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"stringify","","",0,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"instruction"}}],[8,"VirtualMachine","minivm::backend","Trait for a virtual machine.",null,null],[10,"run","","Run a given program.",2,{"inputs":[{"name":"self"}],"output":null}],[0,"commands","minivm","",null,null],[3,"AssembleCommand","minivm::commands","Command to assemble to byte code.",null,null],[3,"CompileCommand","","Command to compile to byte code.",null,null],[3,"ParserCommand","","Command t oparse source.",null,null],[3,"RunCommand","","Command to run byte code.",null,null],[11,"new","","",3,{"inputs":[{"name":"string"}],"output":{"name":"assemblecommand"}}],[11,"execute","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",4,{"inputs":[{"name":"string"}],"output":{"name":"compilecommand"}}],[11,"execute","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",5,{"inputs":[{"name":"string"},{"name":"bool"},{"name":"bool"}],"output":{"name":"parsercommand"}}],[11,"execute","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",6,{"inputs":[{"name":"string"}],"output":{"name":"runcommand"}}],[11,"execute","","",6,{"inputs":[{"name":"self"}],"output":null}],[8,"Command","","Trait for a command to execute.",null,null],[10,"execute","","Executes the command.",7,{"inputs":[{"name":"self"}],"output":null}],[0,"frontend","minivm","",null,null],[3,"Position","minivm::frontend","Describes a character position in the source string.",null,null],[0,"character_stream","","",null,null],[3,"CharacterStream","minivm::frontend::character_stream","Represents a string as stream of characters.",null,null],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new stream.",8,{"inputs":[{"name":"string"}],"output":{"name":"characterstream"}}],[11,"next","","Move to the next character.",8,{"inputs":[{"name":"self"}],"output":null}],[11,"has_next","","Check if there is a next character.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"current","","Get the character at the streams current position.",8,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"peek","","Get the next character without moving to it.",8,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"position","","Get the position of the current character.",8,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[0,"character_helper","minivm::frontend","",null,null],[3,"CharacterHelper","minivm::frontend::character_helper","Provides several helper functions to recognize characters.",null,null],[11,"is_alphabetic","","Determines if a given character is alphabetic.",9,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[11,"is_numeric","","Determines if a given character is numeric.",9,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[11,"is_alphanumeric","","Determines if a given character is alphabetic or numeric.",9,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[11,"is_double_quote","","Determines if a given character is a double quote.",9,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[11,"is_single_quote","","Determines if a given character is a single quote.",9,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[11,"is_operator","","Determines if a given character is an operator.",9,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[11,"is_white_space","","Determines if a given character is a white space.",9,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[11,"is_new_line","","Determines if a given character is a new line.",9,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[0,"lexer","minivm::frontend","",null,null],[3,"Lexer","minivm::frontend::lexer","Does the lexical analysis to recognize tokens from a given source character stream.",null,null],[11,"new","","Creates a new lexer.",10,{"inputs":[{"name":"characterstream"}],"output":{"name":"lexer"}}],[11,"input","","Get the input character stream.",10,{"inputs":[{"name":"self"}],"output":{"name":"characterstream"}}],[11,"current","","Get the current recognized token.",10,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"next","","Recognizes the next token.",10,{"inputs":[{"name":"self"}],"output":null}],[11,"peek","","",10,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[0,"parser","minivm::frontend","",null,null],[3,"Parser","minivm::frontend::parser","Parses the tokens recognized by the lexer.",null,null],[11,"new","","",11,{"inputs":[{"name":"lexer"}],"output":{"name":"parser"}}],[11,"parse","","",11,{"inputs":[{"name":"self"}],"output":null}],[0,"token","minivm::frontend","",null,null],[3,"Token","minivm::frontend::token","Defines a recognized token in the source.",null,null],[4,"TokenType","","Types of tokens.",null,null],[13,"INTEGER","","",12,null],[13,"REAL","","",12,null],[13,"BOOL","","",12,null],[13,"STRING","","",12,null],[13,"CHARACTER","","",12,null],[13,"KEYWORD","","",12,null],[13,"IDENTIFIER","","",12,null],[13,"L_PAREN","","",12,null],[13,"R_PAREN","","",12,null],[13,"L_BRACE","","",12,null],[13,"R_BRACE","","",12,null],[13,"L_BRACK","","",12,null],[13,"R_BRACK","","",12,null],[13,"COMMA","","",12,null],[13,"OPERATOR","","",12,null],[13,"EOL","","",12,null],[13,"EOF","","",12,null],[4,"Keyword","","Reserved keywords.",null,null],[13,"AND","","",13,null],[13,"OR","","",13,null],[13,"NOT","","",13,null],[13,"IF","","",13,null],[13,"ELSE","","",13,null],[13,"WHILE","","",13,null],[13,"CONST","","",13,null],[13,"VAR","","",13,null],[4,"Operator","","Available operators.",null,null],[13,"ASSIGN","","",14,null],[13,"EQUAL","","",14,null],[13,"NOT_EQUAL","","",14,null],[13,"LESS_THAN","","",14,null],[13,"LESS_THAN_EQUAL","","",14,null],[13,"GREATER_THAN","","",14,null],[13,"GREATER_THAN_EQUAL","","",14,null],[13,"PLUS","","",14,null],[13,"MINUS","","",14,null],[13,"STAR","","",14,null],[13,"SLASH","","",14,null],[13,"MOD","","",14,null],[17,"END_OF_FILE","","Sentinel to indicate end of file.",null,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"new","","Creates a new token.",15,{"inputs":[{"name":"position"},{"name":"tokentype"},{"name":"string"}],"output":{"name":"token"}}],[11,"get_token_type","","Get the type of the token.",15,{"inputs":[{"name":"self"}],"output":{"name":"tokentype"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"tokentype"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"tokentype"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"for_literal","","Maps a literal keyword.",13,{"inputs":[{"name":"string"}],"output":{"name":"keyword"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"operator"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","minivm::frontend","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"intermediate","minivm","",null,null]],"paths":[[4,"List"],[4,"Instruction"],[8,"VirtualMachine"],[3,"AssembleCommand"],[3,"CompileCommand"],[3,"ParserCommand"],[3,"RunCommand"],[8,"Command"],[3,"CharacterStream"],[3,"CharacterHelper"],[3,"Lexer"],[3,"Parser"],[4,"TokenType"],[4,"Keyword"],[4,"Operator"],[3,"Token"],[3,"Position"]]};
initSearch(searchIndex);
